<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<flow name="GetArticle" doc:id="ccb132b7-2f23-4e03-b9ea-da0a417d1b0f" >
		<http:listener doc:name="" doc:id="9d535059-d485-497d-b8e2-b2460a9b0df6" config-ref="HTTP_Listener_config" path="/article" allowedMethods="GET" responseStreamingMode="ALWAYS"/>
		<set-variable value="#[message.attributes.queryParams.type_article]" doc:name="type_article" doc:id="859f9e08-8e08-406c-809e-a2d0511c8ba9" variableName="type_article" />
		<choice doc:name="Choice" doc:id="96937089-9fd6-4f1f-810f-3dcfd2c04fd6" >
			<when expression="#[vars.type_article != null]">
				<validation:is-true doc:name="Is valid type" doc:id="a6d5635a-9f0b-4592-9fa1-eb02f9a9e35c" expression="#[['fourniture','mobilier','appareil'] contains vars.type_article]" message="#['Invalid type article' ++ ' ' ++ (vars.type_article default' ')]" />
				<db:select doc:name="SelectArticleByTypeArticle" doc:id="ae97a4f7-7c1c-4b76-9f05-96056c50288c" config-ref="Database_Config">
			<db:sql><![CDATA[SELECT * 
FROM dbo.Article_Stock 
WHERE type = :type_article]]></db:sql>
			<db:input-parameters><![CDATA[#[{'type_article' :vars.type_article}]]]></db:input-parameters>
		</db:select>
			</when>
			<otherwise >
				<db:select doc:name="SelectAllArticle" doc:id="30e1eda3-9758-4741-abad-4f4d0bfb684b" config-ref="Database_Config">
					<db:sql ><![CDATA[SELECT * 
FROM dbo.Article_Stock ]]></db:sql>
				</db:select>
			</otherwise>
		</choice>
		<ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map ( payload01 , indexOfPayload01 ) -> {
	id: (payload01.id default "") ++ payload01.ID,
	title: payload01.titre default "",
	type_article: (payload01.type_article default "") ++ payload01."type",
	stock_available: payload01.stock_available default 0,
	data_update: payload01.date_update as String default ""
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
	</flow>
	<flow name="GetArticleByID" doc:id="c22a0a5d-8aa7-499b-a3b3-03763abf0d22">
		<http:listener doc:name="Listener" doc:id="13263599-53e7-43a8-a2b7-dd314235558e" config-ref="HTTP_Listener_config" path="article/{id}" allowedMethods="GET" />
        <db:select doc:name="Select" doc:id="eb0feadc-c703-4cb1-8b19-b1f916748020" config-ref="Database_Config">
			<db:sql><![CDATA[SELECT *
FROM dbo.Article_Stock
WHERE ID = :ID]]></db:sql>
			<db:input-parameters><![CDATA[#[{'ID' :attributes.uriParams.'id'}]]]></db:input-parameters>
		</db:select>
		<validation:is-not-empty-collection doc:name="Is not empty collection" doc:id="00fa5b35-41f2-4957-a292-2717e9e96d8d" message="L'article que vous recherchez n'existe pas"/>
		<ee:transform doc:name="Transform Message" doc:id="0c31a765-06c7-41be-a5e5-8c100a7033cc">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map ( payload01 , indexOfPayload01 ) -> {
	id:   payload01.ID,
	title: payload01.titre default "",
	type_article: (payload01.type_article default "") ++ payload01."type",
	stock_available: payload01.stock_available default 0,
	data_update: payload01.date_update as String default ""
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="PostArticle" doc:id="9d2e9448-16da-4945-902e-0f82bdb74e6c" >
		<http:listener doc:name="Listener" doc:id="76407c0a-cf67-49c1-94c9-8d0357eded7a" config-ref="HTTP_Listener_config" path="/article" allowedMethods="POST"/>
		<set-variable doc:name=" Set forceParams" doc:id="8303e99f-02aa-4f91-a83e-7021c514cb83" variableName="forceParams" value="#[message.attributes.queryParams.forceParams]"/>
		<set-variable value="#[payload]" doc:name="Set listArticle" doc:id="b64e9d41-8c3f-4adf-8d96-c709fcd1f2f2" variableName="listArticle"/>
		<ee:transform doc:name="Generate dynamic in-clause" doc:id="eb3d5aa3-37e3-45e5-a86e-efb780e34614">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="inClause" ><![CDATA[%dw 2.0
output application/java
---


payload.id map ":arg$$" reduce ((item, accumulator) -> accumulator ++ ", " ++ item)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Generate dynamic inputParameters" doc:id="cbe08250-ae05-43a4-a14d-6fc062fbe26a">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="inputParameters" ><![CDATA[%dw 2.0
output application/java
---
payload.id map {"arg$$" : $} reduce ((item, accumulator = {}) -> item ++ accumulator)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:select doc:name="Select" doc:id="1406736d-7c74-4fcb-8062-4a95d22da9a2" config-ref="Database_Config">
			<db:sql ><![CDATA[#['SELECT ID FROM dbo.Article_Stock WHERE ID IN( $(vars.inClause) )']]]></db:sql>
			<db:input-parameters ><![CDATA[#[vars.inputParameters]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="38a72e98-6e71-404c-968b-d4ab8c710d5e" >
			<when expression="#[vars.forceParams != null]">
				<validation:is-not-empty-collection doc:name="Is not empty collection" doc:id="487fb3d5-3c31-4257-baa4-f9e9157a2dfe" message="ftftftf"/>
			</when>
			<otherwise >
				<validation:is-empty-collection doc:name="Is empty collection" doc:id="717d1a10-a3da-4240-9adc-cd1473d240aa" message="Vous ne pouvez pas insérer des articles déjà existant"/>
				<set-payload value="#[vars.listArticle]" doc:name="Set Payload" doc:id="905d9b13-8670-4792-8c80-46f7fa95be63" />
				<foreach doc:name="Insertion d'article" doc:id="9a2f7a19-9f8d-406b-aa48-39bacba7e9a8" collection="#[payload]">
					<db:insert doc:name="Insert" doc:id="42b292f7-ecca-400c-83ad-620bc866fc05" config-ref="Database_Config">
						<db:sql ><![CDATA[Insert into Article_Stock(ID,titre,[type],stock_available , date_update)
values (:ID,:titre,:type,:stock_available,:date_update);]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'ID' :payload.'id' , 'titre': payload.'title' , 'type':payload.'type_article' ,'stock_available':payload.'stock_available','date_update' : payload.'data_update'}]]]></db:input-parameters>
					</db:insert>
				</foreach>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="a6ce2d04-61aa-4b8b-b856-b7607813c0b6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
